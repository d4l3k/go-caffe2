// Code generated by protoc-gen-go. DO NOT EDIT.
// source: caffe2/proto/metanet.proto

package caffe2pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ModelInfo struct {
	Project          *string `protobuf:"bytes,1,opt,name=project" json:"project,omitempty"`
	ModelClass       *string `protobuf:"bytes,2,opt,name=modelClass" json:"modelClass,omitempty"`
	Version          *string `protobuf:"bytes,3,opt,name=version" json:"version,omitempty"`
	PredictorType    *string `protobuf:"bytes,4,opt,name=predictorType,def=SINGLE_PREDICTOR" json:"predictorType,omitempty"`
	ModelId          *string `protobuf:"bytes,5,opt,name=modelId" json:"modelId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ModelInfo) Reset()                    { *m = ModelInfo{} }
func (m *ModelInfo) String() string            { return proto.CompactTextString(m) }
func (*ModelInfo) ProtoMessage()               {}
func (*ModelInfo) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

const Default_ModelInfo_PredictorType string = "SINGLE_PREDICTOR"

func (m *ModelInfo) GetProject() string {
	if m != nil && m.Project != nil {
		return *m.Project
	}
	return ""
}

func (m *ModelInfo) GetModelClass() string {
	if m != nil && m.ModelClass != nil {
		return *m.ModelClass
	}
	return ""
}

func (m *ModelInfo) GetVersion() string {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return ""
}

func (m *ModelInfo) GetPredictorType() string {
	if m != nil && m.PredictorType != nil {
		return *m.PredictorType
	}
	return Default_ModelInfo_PredictorType
}

func (m *ModelInfo) GetModelId() string {
	if m != nil && m.ModelId != nil {
		return *m.ModelId
	}
	return ""
}

type BlobsMap struct {
	Key              *string  `protobuf:"bytes,1,req,name=key" json:"key,omitempty"`
	Value            []string `protobuf:"bytes,2,rep,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *BlobsMap) Reset()                    { *m = BlobsMap{} }
func (m *BlobsMap) String() string            { return proto.CompactTextString(m) }
func (*BlobsMap) ProtoMessage()               {}
func (*BlobsMap) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{1} }

func (m *BlobsMap) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *BlobsMap) GetValue() []string {
	if m != nil {
		return m.Value
	}
	return nil
}

type NetsMap struct {
	Key              *string `protobuf:"bytes,1,req,name=key" json:"key,omitempty"`
	Value            *NetDef `protobuf:"bytes,2,req,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *NetsMap) Reset()                    { *m = NetsMap{} }
func (m *NetsMap) String() string            { return proto.CompactTextString(m) }
func (*NetsMap) ProtoMessage()               {}
func (*NetsMap) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{2} }

func (m *NetsMap) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *NetsMap) GetValue() *NetDef {
	if m != nil {
		return m.Value
	}
	return nil
}

type PlansMap struct {
	Key              *string  `protobuf:"bytes,1,req,name=key" json:"key,omitempty"`
	Value            *PlanDef `protobuf:"bytes,2,req,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *PlansMap) Reset()                    { *m = PlansMap{} }
func (m *PlansMap) String() string            { return proto.CompactTextString(m) }
func (*PlansMap) ProtoMessage()               {}
func (*PlansMap) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{3} }

func (m *PlansMap) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *PlansMap) GetValue() *PlanDef {
	if m != nil {
		return m.Value
	}
	return nil
}

type StringMap struct {
	Key              *string `protobuf:"bytes,1,req,name=key" json:"key,omitempty"`
	Value            *string `protobuf:"bytes,2,req,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *StringMap) Reset()                    { *m = StringMap{} }
func (m *StringMap) String() string            { return proto.CompactTextString(m) }
func (*StringMap) ProtoMessage()               {}
func (*StringMap) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{4} }

func (m *StringMap) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *StringMap) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

type MetaNetDef struct {
	Blobs []*BlobsMap `protobuf:"bytes,1,rep,name=blobs" json:"blobs,omitempty"`
	// Text-format serialized NetDefs.
	Nets []*NetsMap `protobuf:"bytes,2,rep,name=nets" json:"nets,omitempty"`
	// Info about where the model comes from. Possible use cases:
	// 1) sanity check or diagnose
	// 2) provide info for evaluation.
	ModelInfo               *ModelInfo   `protobuf:"bytes,3,opt,name=modelInfo" json:"modelInfo,omitempty"`
	Plans                   []*PlansMap  `protobuf:"bytes,4,rep,name=plans" json:"plans,omitempty"`
	ApplicationSpecificInfo []*StringMap `protobuf:"bytes,5,rep,name=applicationSpecificInfo" json:"applicationSpecificInfo,omitempty"`
	XXX_unrecognized        []byte       `json:"-"`
}

func (m *MetaNetDef) Reset()                    { *m = MetaNetDef{} }
func (m *MetaNetDef) String() string            { return proto.CompactTextString(m) }
func (*MetaNetDef) ProtoMessage()               {}
func (*MetaNetDef) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{5} }

func (m *MetaNetDef) GetBlobs() []*BlobsMap {
	if m != nil {
		return m.Blobs
	}
	return nil
}

func (m *MetaNetDef) GetNets() []*NetsMap {
	if m != nil {
		return m.Nets
	}
	return nil
}

func (m *MetaNetDef) GetModelInfo() *ModelInfo {
	if m != nil {
		return m.ModelInfo
	}
	return nil
}

func (m *MetaNetDef) GetPlans() []*PlansMap {
	if m != nil {
		return m.Plans
	}
	return nil
}

func (m *MetaNetDef) GetApplicationSpecificInfo() []*StringMap {
	if m != nil {
		return m.ApplicationSpecificInfo
	}
	return nil
}

func init() {
	proto.RegisterType((*ModelInfo)(nil), "caffe2.ModelInfo")
	proto.RegisterType((*BlobsMap)(nil), "caffe2.BlobsMap")
	proto.RegisterType((*NetsMap)(nil), "caffe2.NetsMap")
	proto.RegisterType((*PlansMap)(nil), "caffe2.PlansMap")
	proto.RegisterType((*StringMap)(nil), "caffe2.StringMap")
	proto.RegisterType((*MetaNetDef)(nil), "caffe2.MetaNetDef")
}

func init() { proto.RegisterFile("caffe2/proto/metanet.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 387 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x52, 0x4d, 0xab, 0xd3, 0x40,
	0x14, 0x25, 0x49, 0xe3, 0x7b, 0xb9, 0x45, 0xad, 0x83, 0xe0, 0xf8, 0x16, 0x12, 0xea, 0x07, 0x59,
	0xbd, 0x42, 0x04, 0x17, 0xee, 0xb4, 0x2d, 0x12, 0xb4, 0xb5, 0x4c, 0xbb, 0x97, 0x69, 0x7a, 0x23,
	0xd1, 0x34, 0x33, 0x24, 0x63, 0xa1, 0x3f, 0xcb, 0x5f, 0xa8, 0xcc, 0x4c, 0xa6, 0x6d, 0x16, 0xe5,
	0xed, 0x72, 0x72, 0x3e, 0xee, 0xcd, 0xb9, 0x81, 0xbb, 0x9c, 0x17, 0x05, 0xa6, 0x13, 0xd9, 0x08,
	0x25, 0x26, 0x7b, 0x54, 0xbc, 0x46, 0x75, 0x6f, 0x10, 0x79, 0x64, 0xb9, 0xbb, 0x97, 0x3d, 0x8d,
	0x05, 0x56, 0x32, 0xfe, 0xeb, 0x41, 0xb4, 0x10, 0x3b, 0xac, 0xb2, 0xba, 0x10, 0x84, 0xc2, 0x8d,
	0x6c, 0xc4, 0x2f, 0xcc, 0x15, 0xf5, 0x62, 0x2f, 0x89, 0x98, 0x83, 0xe4, 0x15, 0xc0, 0x5e, 0xcb,
	0xa6, 0x15, 0x6f, 0x5b, 0xea, 0x1b, 0xf2, 0xe2, 0x8d, 0x76, 0x1e, 0xb0, 0x69, 0x4b, 0x51, 0xd3,
	0xc0, 0x3a, 0x3b, 0x48, 0x3e, 0xc0, 0x63, 0xd9, 0xe0, 0xae, 0xcc, 0x95, 0x68, 0x36, 0x47, 0x89,
	0x74, 0xa0, 0xf9, 0x8f, 0xa3, 0x75, 0xb6, 0xfc, 0xf2, 0x6d, 0xfe, 0x63, 0xc5, 0xe6, 0xb3, 0x6c,
	0xba, 0xf9, 0xce, 0x58, 0x5f, 0xa6, 0x13, 0x4d, 0x7e, 0xb6, 0xa3, 0xa1, 0x4d, 0xec, 0xe0, 0x38,
	0x85, 0xdb, 0xcf, 0x95, 0xd8, 0xb6, 0x0b, 0x2e, 0xc9, 0x08, 0x82, 0xdf, 0x78, 0xa4, 0x5e, 0xec,
	0x27, 0x11, 0xd3, 0x8f, 0xe4, 0x39, 0x84, 0x07, 0x5e, 0xfd, 0x41, 0xea, 0xc7, 0x41, 0x12, 0x31,
	0x0b, 0xc6, 0x9f, 0xe0, 0x66, 0x89, 0xea, 0x8a, 0xe5, 0xcd, 0xd9, 0xe2, 0x27, 0xc3, 0xf4, 0xc9,
	0x7d, 0x57, 0xd1, 0x12, 0xd5, 0x0c, 0x0b, 0x17, 0x31, 0x85, 0xdb, 0x55, 0xc5, 0xeb, 0x2b, 0x19,
	0x6f, 0xfb, 0x19, 0x4f, 0x5d, 0x86, 0xb6, 0x5c, 0x84, 0xbc, 0x87, 0x68, 0xad, 0x9a, 0xb2, 0xfe,
	0xf9, 0xe0, 0xf2, 0xfe, 0x79, 0xf9, 0x7f, 0x1e, 0xc0, 0x02, 0x15, 0xb7, 0xfb, 0x90, 0x77, 0x10,
	0x6e, 0xf5, 0xf7, 0x53, 0x2f, 0x0e, 0x92, 0x61, 0x3a, 0x72, 0xa3, 0x5c, 0x29, 0xcc, 0xd2, 0xe4,
	0x35, 0x0c, 0x6a, 0x54, 0xad, 0x29, 0xe2, 0x62, 0xa3, 0xae, 0x07, 0x66, 0x48, 0x32, 0x81, 0x68,
	0xef, 0xee, 0x6f, 0x4e, 0x37, 0x4c, 0x9f, 0x39, 0xe5, 0xe9, 0xc7, 0x60, 0x67, 0x8d, 0x9e, 0x2e,
	0x75, 0x0d, 0x74, 0xd0, 0x9f, 0xee, 0xba, 0x61, 0x96, 0x26, 0x5f, 0xe1, 0x05, 0x97, 0xb2, 0x2a,
	0x73, 0xae, 0x4a, 0x51, 0xaf, 0x25, 0xe6, 0x65, 0x51, 0xe6, 0x66, 0x4c, 0x68, 0x9c, 0xa7, 0x31,
	0xa7, 0x42, 0xd8, 0x35, 0xc7, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x3d, 0x3d, 0x11, 0xcc, 0xe6,
	0x02, 0x00, 0x00,
}
