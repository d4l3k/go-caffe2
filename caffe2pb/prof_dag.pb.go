// Code generated by protoc-gen-go. DO NOT EDIT.
// source: caffe2/proto/prof_dag.proto

package caffe2pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// A two number summary for a value. It also has count for restoring.
type TwoNumberStatsProto struct {
	Mean             *float32 `protobuf:"fixed32,1,opt,name=mean" json:"mean,omitempty"`
	Stddev           *float32 `protobuf:"fixed32,2,opt,name=stddev" json:"stddev,omitempty"`
	Count            *int64   `protobuf:"varint,3,opt,name=count" json:"count,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *TwoNumberStatsProto) Reset()                    { *m = TwoNumberStatsProto{} }
func (m *TwoNumberStatsProto) String() string            { return proto.CompactTextString(m) }
func (*TwoNumberStatsProto) ProtoMessage()               {}
func (*TwoNumberStatsProto) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *TwoNumberStatsProto) GetMean() float32 {
	if m != nil && m.Mean != nil {
		return *m.Mean
	}
	return 0
}

func (m *TwoNumberStatsProto) GetStddev() float32 {
	if m != nil && m.Stddev != nil {
		return *m.Stddev
	}
	return 0
}

func (m *TwoNumberStatsProto) GetCount() int64 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

// Blob profiling information. Profile for a blob is created every time
// a node outputs to the blob.
type BlobProfile struct {
	// Name of the blob (corresponds to OperatorDef.output).
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Profiling statistics.
	BytesUsed        *TwoNumberStatsProto `protobuf:"bytes,3,opt,name=bytes_used,json=bytesUsed" json:"bytes_used,omitempty"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *BlobProfile) Reset()                    { *m = BlobProfile{} }
func (m *BlobProfile) String() string            { return proto.CompactTextString(m) }
func (*BlobProfile) ProtoMessage()               {}
func (*BlobProfile) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *BlobProfile) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *BlobProfile) GetBytesUsed() *TwoNumberStatsProto {
	if m != nil {
		return m.BytesUsed
	}
	return nil
}

// Protobuf format to serialize profiler data.
type ProfDAGProto struct {
	// The name for the operator
	Name *string `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	// The mean execution time
	Mean *float32 `protobuf:"fixed32,2,req,name=mean" json:"mean,omitempty"`
	// The standard deviation
	Stddev *float32 `protobuf:"fixed32,3,req,name=stddev" json:"stddev,omitempty"`
	// New field to represent the numbers above, and with count.
	ExecutionTime *TwoNumberStatsProto `protobuf:"bytes,4,opt,name=execution_time,json=executionTime" json:"execution_time,omitempty"`
	// Blob profiles that this node outputs.
	OutputProfile    []*BlobProfile `protobuf:"bytes,5,rep,name=output_profile,json=outputProfile" json:"output_profile,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *ProfDAGProto) Reset()                    { *m = ProfDAGProto{} }
func (m *ProfDAGProto) String() string            { return proto.CompactTextString(m) }
func (*ProfDAGProto) ProtoMessage()               {}
func (*ProfDAGProto) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

func (m *ProfDAGProto) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *ProfDAGProto) GetMean() float32 {
	if m != nil && m.Mean != nil {
		return *m.Mean
	}
	return 0
}

func (m *ProfDAGProto) GetStddev() float32 {
	if m != nil && m.Stddev != nil {
		return *m.Stddev
	}
	return 0
}

func (m *ProfDAGProto) GetExecutionTime() *TwoNumberStatsProto {
	if m != nil {
		return m.ExecutionTime
	}
	return nil
}

func (m *ProfDAGProto) GetOutputProfile() []*BlobProfile {
	if m != nil {
		return m.OutputProfile
	}
	return nil
}

// Operator profiling information.
//
// Note: The indices for elements of 'stats' and the indices of
// 'output_profile' inside each 'stats' are assumed to match the
// indices of 'op' elements of a corresponding NetDef and the 'output'
// indices within each 'op'.
type ProfDAGProtos struct {
	Stats            []*ProfDAGProto `protobuf:"bytes,1,rep,name=stats" json:"stats,omitempty"`
	NetName          *string         `protobuf:"bytes,2,opt,name=net_name,json=netName" json:"net_name,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *ProfDAGProtos) Reset()                    { *m = ProfDAGProtos{} }
func (m *ProfDAGProtos) String() string            { return proto.CompactTextString(m) }
func (*ProfDAGProtos) ProtoMessage()               {}
func (*ProfDAGProtos) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{3} }

func (m *ProfDAGProtos) GetStats() []*ProfDAGProto {
	if m != nil {
		return m.Stats
	}
	return nil
}

func (m *ProfDAGProtos) GetNetName() string {
	if m != nil && m.NetName != nil {
		return *m.NetName
	}
	return ""
}

func init() {
	proto.RegisterType((*TwoNumberStatsProto)(nil), "caffe2.TwoNumberStatsProto")
	proto.RegisterType((*BlobProfile)(nil), "caffe2.BlobProfile")
	proto.RegisterType((*ProfDAGProto)(nil), "caffe2.ProfDAGProto")
	proto.RegisterType((*ProfDAGProtos)(nil), "caffe2.ProfDAGProtos")
}

func init() { proto.RegisterFile("caffe2/proto/prof_dag.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 306 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x50, 0x4d, 0x6b, 0xc2, 0x40,
	0x10, 0x25, 0x89, 0xda, 0x3a, 0x56, 0x0f, 0xab, 0x94, 0x14, 0x2f, 0x21, 0x27, 0xe9, 0xc1, 0x82,
	0xc7, 0xde, 0x2a, 0x85, 0xde, 0x44, 0xb6, 0xb6, 0x3d, 0x95, 0xb0, 0x9a, 0x49, 0x09, 0x98, 0x5d,
	0x71, 0x67, 0xfb, 0xf1, 0x27, 0xfb, 0x9b, 0x4a, 0x66, 0x8d, 0x78, 0x10, 0x7a, 0x59, 0xf6, 0xcd,
	0xbc, 0x79, 0xf3, 0xde, 0xc0, 0x78, 0xa3, 0x8a, 0x02, 0x67, 0x77, 0xbb, 0xbd, 0x21, 0x53, 0xbf,
	0x45, 0x96, 0xab, 0x8f, 0x29, 0x43, 0xd1, 0xf1, 0xcd, 0xf4, 0x0d, 0x86, 0xab, 0x2f, 0xb3, 0x70,
	0xd5, 0x1a, 0xf7, 0xcf, 0xa4, 0xc8, 0x2e, 0xb9, 0x2d, 0xa0, 0x55, 0xa1, 0xd2, 0x71, 0x90, 0x04,
	0x93, 0x50, 0xf2, 0x5f, 0x5c, 0x43, 0xc7, 0x52, 0x9e, 0xe3, 0x67, 0x1c, 0x72, 0xf5, 0x80, 0xc4,
	0x08, 0xda, 0x1b, 0xe3, 0x34, 0xc5, 0x51, 0x12, 0x4c, 0x22, 0xe9, 0x41, 0xfa, 0x0e, 0xbd, 0xf9,
	0xd6, 0xac, 0x97, 0x7b, 0x53, 0x94, 0x5b, 0xac, 0x05, 0xb5, 0xaa, 0x90, 0x05, 0xbb, 0x92, 0xff,
	0xe2, 0x1e, 0x60, 0xfd, 0x43, 0x68, 0x33, 0x67, 0x31, 0xe7, 0xe9, 0xde, 0x6c, 0x3c, 0xf5, 0xc6,
	0xa6, 0x67, 0x5c, 0xc9, 0x2e, 0xd3, 0x5f, 0x2c, 0xe6, 0xe9, 0x6f, 0x00, 0x57, 0xb5, 0xf6, 0xe3,
	0xc3, 0xd3, 0xd1, 0xf1, 0x61, 0x41, 0x78, 0x5c, 0xd0, 0xa4, 0x08, 0x93, 0xf0, 0x4c, 0x8a, 0x88,
	0xab, 0x4d, 0x8a, 0x39, 0x0c, 0xf0, 0x1b, 0x37, 0x8e, 0x4a, 0xa3, 0x33, 0x2a, 0x2b, 0x8c, 0x5b,
	0xff, 0x1b, 0xea, 0x1f, 0x47, 0x56, 0x25, 0x07, 0x1a, 0x18, 0x47, 0x3b, 0x47, 0xd9, 0xce, 0xc7,
	0x8e, 0xdb, 0x49, 0x34, 0xe9, 0xcd, 0x86, 0x8d, 0xc6, 0xc9, 0x45, 0x64, 0xdf, 0x53, 0x0f, 0x30,
	0x7d, 0x85, 0xfe, 0x69, 0x1e, 0x2b, 0x6e, 0xa1, 0x6d, 0xeb, 0x4d, 0x71, 0xc0, 0x1a, 0xa3, 0x46,
	0xe3, 0x94, 0x25, 0x3d, 0x45, 0xdc, 0xc0, 0xa5, 0x46, 0xca, 0xf8, 0x00, 0x21, 0x5f, 0xf8, 0x42,
	0x23, 0x2d, 0x54, 0x85, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xfe, 0x12, 0x8c, 0x76, 0x06, 0x02,
	0x00, 0x00,
}
