// Code generated by protoc-gen-go. DO NOT EDIT.
// source: caffe2/proto/predictor_consts.proto

package caffe2pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type PredictorConsts struct {
	// Important - to ensure ordered traversal of the DB, these must be
	// set in the given (lexicographic) order in the input DBReader.
	META_NET_DEF       *string `protobuf:"bytes,1,opt,name=META_NET_DEF,json=METANETDEF,def=!!META_NET_DEF" json:"META_NET_DEF,omitempty"`
	PREDICTOR_DBREADER *string `protobuf:"bytes,2,opt,name=PREDICTOR_DBREADER,json=PREDICTORDBREADER,def=!!PREDICTOR_DBREADER" json:"PREDICTOR_DBREADER,omitempty"`
	// Blob types used in MetaNetDef blobs
	PARAMETERS_BLOB_TYPE *string `protobuf:"bytes,3,opt,name=PARAMETERS_BLOB_TYPE,json=PARAMETERSBLOBTYPE,def=PARAMETERS_BLOB_TYPE" json:"PARAMETERS_BLOB_TYPE,omitempty"`
	INPUTS_BLOB_TYPE     *string `protobuf:"bytes,4,opt,name=INPUTS_BLOB_TYPE,json=INPUTSBLOBTYPE,def=INPUTS_BLOB_TYPE" json:"INPUTS_BLOB_TYPE,omitempty"`
	OUTPUTS_BLOB_TYPE    *string `protobuf:"bytes,5,opt,name=OUTPUTS_BLOB_TYPE,json=OUTPUTSBLOBTYPE,def=OUTPUTS_BLOB_TYPE" json:"OUTPUTS_BLOB_TYPE,omitempty"`
	// Net types used in MetaNetDef nets
	GLOBAL_INIT_NET_TYPE  *string `protobuf:"bytes,6,opt,name=GLOBAL_INIT_NET_TYPE,json=GLOBALINITNETTYPE,def=GLOBAL_INIT_NET_TYPE" json:"GLOBAL_INIT_NET_TYPE,omitempty"`
	PREDICT_INIT_NET_TYPE *string `protobuf:"bytes,7,opt,name=PREDICT_INIT_NET_TYPE,json=PREDICTINITNETTYPE,def=PREDICT_INIT_NET_TYPE" json:"PREDICT_INIT_NET_TYPE,omitempty"`
	PREDICT_NET_TYPE      *string `protobuf:"bytes,8,opt,name=PREDICT_NET_TYPE,json=PREDICTNETTYPE,def=PREDICT_NET_TYPE" json:"PREDICT_NET_TYPE,omitempty"`
	SINGLE_PREDICTOR      *string `protobuf:"bytes,9,opt,name=SINGLE_PREDICTOR,json=SINGLEPREDICTOR,def=SINGLE_PREDICTOR" json:"SINGLE_PREDICTOR,omitempty"`
	MULTI_PREDICTOR       *string `protobuf:"bytes,10,opt,name=MULTI_PREDICTOR,json=MULTIPREDICTOR,def=MULTI_PREDICTOR" json:"MULTI_PREDICTOR,omitempty"`
	TRAIN_INIT_PLAN_TYPE  *string `protobuf:"bytes,11,opt,name=TRAIN_INIT_PLAN_TYPE,json=TRAININITPLANTYPE,def=TRAIN_INIT_PLAN_TYPE" json:"TRAIN_INIT_PLAN_TYPE,omitempty"`
	TRAIN_PLAN_TYPE       *string `protobuf:"bytes,12,opt,name=TRAIN_PLAN_TYPE,json=TRAINPLANTYPE,def=TRAIN_PLAN_TYPE" json:"TRAIN_PLAN_TYPE,omitempty"`
	XXX_unrecognized      []byte  `json:"-"`
}

func (m *PredictorConsts) Reset()                    { *m = PredictorConsts{} }
func (m *PredictorConsts) String() string            { return proto.CompactTextString(m) }
func (*PredictorConsts) ProtoMessage()               {}
func (*PredictorConsts) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

const Default_PredictorConsts_META_NET_DEF string = "!!META_NET_DEF"
const Default_PredictorConsts_PREDICTOR_DBREADER string = "!!PREDICTOR_DBREADER"
const Default_PredictorConsts_PARAMETERS_BLOB_TYPE string = "PARAMETERS_BLOB_TYPE"
const Default_PredictorConsts_INPUTS_BLOB_TYPE string = "INPUTS_BLOB_TYPE"
const Default_PredictorConsts_OUTPUTS_BLOB_TYPE string = "OUTPUTS_BLOB_TYPE"
const Default_PredictorConsts_GLOBAL_INIT_NET_TYPE string = "GLOBAL_INIT_NET_TYPE"
const Default_PredictorConsts_PREDICT_INIT_NET_TYPE string = "PREDICT_INIT_NET_TYPE"
const Default_PredictorConsts_PREDICT_NET_TYPE string = "PREDICT_NET_TYPE"
const Default_PredictorConsts_SINGLE_PREDICTOR string = "SINGLE_PREDICTOR"
const Default_PredictorConsts_MULTI_PREDICTOR string = "MULTI_PREDICTOR"
const Default_PredictorConsts_TRAIN_INIT_PLAN_TYPE string = "TRAIN_INIT_PLAN_TYPE"
const Default_PredictorConsts_TRAIN_PLAN_TYPE string = "TRAIN_PLAN_TYPE"

func (m *PredictorConsts) GetMETA_NET_DEF() string {
	if m != nil && m.META_NET_DEF != nil {
		return *m.META_NET_DEF
	}
	return Default_PredictorConsts_META_NET_DEF
}

func (m *PredictorConsts) GetPREDICTOR_DBREADER() string {
	if m != nil && m.PREDICTOR_DBREADER != nil {
		return *m.PREDICTOR_DBREADER
	}
	return Default_PredictorConsts_PREDICTOR_DBREADER
}

func (m *PredictorConsts) GetPARAMETERS_BLOB_TYPE() string {
	if m != nil && m.PARAMETERS_BLOB_TYPE != nil {
		return *m.PARAMETERS_BLOB_TYPE
	}
	return Default_PredictorConsts_PARAMETERS_BLOB_TYPE
}

func (m *PredictorConsts) GetINPUTS_BLOB_TYPE() string {
	if m != nil && m.INPUTS_BLOB_TYPE != nil {
		return *m.INPUTS_BLOB_TYPE
	}
	return Default_PredictorConsts_INPUTS_BLOB_TYPE
}

func (m *PredictorConsts) GetOUTPUTS_BLOB_TYPE() string {
	if m != nil && m.OUTPUTS_BLOB_TYPE != nil {
		return *m.OUTPUTS_BLOB_TYPE
	}
	return Default_PredictorConsts_OUTPUTS_BLOB_TYPE
}

func (m *PredictorConsts) GetGLOBAL_INIT_NET_TYPE() string {
	if m != nil && m.GLOBAL_INIT_NET_TYPE != nil {
		return *m.GLOBAL_INIT_NET_TYPE
	}
	return Default_PredictorConsts_GLOBAL_INIT_NET_TYPE
}

func (m *PredictorConsts) GetPREDICT_INIT_NET_TYPE() string {
	if m != nil && m.PREDICT_INIT_NET_TYPE != nil {
		return *m.PREDICT_INIT_NET_TYPE
	}
	return Default_PredictorConsts_PREDICT_INIT_NET_TYPE
}

func (m *PredictorConsts) GetPREDICT_NET_TYPE() string {
	if m != nil && m.PREDICT_NET_TYPE != nil {
		return *m.PREDICT_NET_TYPE
	}
	return Default_PredictorConsts_PREDICT_NET_TYPE
}

func (m *PredictorConsts) GetSINGLE_PREDICTOR() string {
	if m != nil && m.SINGLE_PREDICTOR != nil {
		return *m.SINGLE_PREDICTOR
	}
	return Default_PredictorConsts_SINGLE_PREDICTOR
}

func (m *PredictorConsts) GetMULTI_PREDICTOR() string {
	if m != nil && m.MULTI_PREDICTOR != nil {
		return *m.MULTI_PREDICTOR
	}
	return Default_PredictorConsts_MULTI_PREDICTOR
}

func (m *PredictorConsts) GetTRAIN_INIT_PLAN_TYPE() string {
	if m != nil && m.TRAIN_INIT_PLAN_TYPE != nil {
		return *m.TRAIN_INIT_PLAN_TYPE
	}
	return Default_PredictorConsts_TRAIN_INIT_PLAN_TYPE
}

func (m *PredictorConsts) GetTRAIN_PLAN_TYPE() string {
	if m != nil && m.TRAIN_PLAN_TYPE != nil {
		return *m.TRAIN_PLAN_TYPE
	}
	return Default_PredictorConsts_TRAIN_PLAN_TYPE
}

func init() {
	proto.RegisterType((*PredictorConsts)(nil), "caffe2.PredictorConsts")
}

func init() { proto.RegisterFile("caffe2/proto/predictor_consts.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 360 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0xd1, 0x4d, 0x4f, 0xfa, 0x40,
	0x10, 0x06, 0xf0, 0xf0, 0x7f, 0x41, 0x19, 0xb1, 0xa5, 0x9b, 0x9a, 0xf4, 0x68, 0xf5, 0xe2, 0x49,
	0x8c, 0x17, 0x0d, 0xc6, 0x43, 0x4b, 0x07, 0x6c, 0x52, 0xb6, 0xcd, 0xb0, 0x1c, 0x3c, 0x6d, 0x0c,
	0x42, 0xe2, 0xc5, 0x12, 0xe0, 0x7b, 0xf8, 0x95, 0x4d, 0x67, 0x69, 0x69, 0x4a, 0x8f, 0xfd, 0xcd,
	0x3c, 0x4f, 0xb6, 0xbb, 0x70, 0xbb, 0xfc, 0x58, 0xaf, 0x57, 0x8f, 0xc3, 0xcd, 0x36, 0xdf, 0xe7,
	0xc3, 0xcd, 0x76, 0xf5, 0xf9, 0xb5, 0xdc, 0xe7, 0x5b, 0xbd, 0xcc, 0xbf, 0x77, 0xfb, 0xdd, 0x3d,
	0xb3, 0xe8, 0x9a, 0xa5, 0x9b, 0x9f, 0x2e, 0xd8, 0x59, 0xb9, 0x32, 0xe6, 0x0d, 0xf1, 0x00, 0xfd,
	0x19, 0xaa, 0x40, 0x4b, 0x54, 0x3a, 0xc2, 0x89, 0xd7, 0xb9, 0xee, 0xdc, 0xf5, 0x46, 0x96, 0xef,
	0xd7, 0x95, 0xa0, 0xf8, 0x92, 0xa8, 0x22, 0x9c, 0x88, 0x31, 0x88, 0x8c, 0x30, 0x8a, 0xc7, 0x2a,
	0x25, 0x1d, 0x85, 0x84, 0x41, 0x84, 0xe4, 0xfd, 0xe1, 0x9c, 0xeb, 0xfb, 0xa7, 0x33, 0x72, 0x2a,
	0x2b, 0x49, 0x4c, 0xc0, 0xcd, 0x02, 0x0a, 0x66, 0xa8, 0x90, 0xe6, 0x3a, 0x4c, 0xd2, 0x50, 0xab,
	0xf7, 0x0c, 0xbd, 0xbf, 0xa6, 0xa6, 0x6d, 0x46, 0xe2, 0xa8, 0x05, 0x16, 0x26, 0x46, 0x30, 0x88,
	0x65, 0xb6, 0x50, 0xf5, 0x8e, 0x7f, 0xdc, 0x71, 0xe2, 0x64, 0x19, 0xa9, 0xb2, 0xaf, 0xe0, 0xa4,
	0x0b, 0xd5, 0x08, 0xff, 0xe7, 0xf0, 0xe9, 0x80, 0xec, 0x03, 0x55, 0x71, 0x04, 0x77, 0x9a, 0xa4,
	0x61, 0x90, 0xe8, 0x58, 0xc6, 0x8a, 0xaf, 0x8a, 0x1b, 0xba, 0xe6, 0x17, 0xda, 0x66, 0xe4, 0x18,
	0x2d, 0x50, 0xa2, 0xe2, 0x9a, 0x37, 0xb8, 0x3a, 0x5c, 0x4f, 0xa3, 0xe7, 0x8c, 0x7b, 0xda, 0x87,
	0x54, 0x3e, 0x41, 0xbd, 0x69, 0x04, 0x83, 0x72, 0xb9, 0x2a, 0x39, 0x37, 0x77, 0xd1, 0x74, 0xb2,
	0x0e, 0x52, 0x66, 0x5f, 0x60, 0x30, 0x8f, 0xe5, 0x34, 0x41, 0x5d, 0xbd, 0x95, 0xd7, 0x33, 0xd9,
	0xa6, 0x93, 0x6d, 0xa4, 0x02, 0xf1, 0x0c, 0xf6, 0x6c, 0x91, 0xa8, 0xb8, 0x96, 0x05, 0xce, 0x36,
	0x99, 0x2c, 0x86, 0x63, 0x12, 0xc1, 0x55, 0x14, 0xc4, 0xd2, 0xfc, 0x5d, 0x96, 0x04, 0xd2, 0x1c,
	0xfb, 0xc2, 0xdc, 0x61, 0xdb, 0x8c, 0x1c, 0xd6, 0x02, 0x0b, 0xe3, 0xd3, 0x3f, 0x81, 0x6d, 0x56,
	0x8f, 0x0d, 0x7d, 0x73, 0x80, 0x06, 0xd3, 0x25, 0x43, 0x19, 0xfc, 0x0d, 0x00, 0x00, 0xff, 0xff,
	0x81, 0xed, 0x74, 0xca, 0x3f, 0x03, 0x00, 0x00,
}
